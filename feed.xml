<feed xmlns="http://www.w3.org/2005/Atom"> <id></id><title>Ligengxin's Blog</title><subtitle>This is Ligengxin's Blog, help myself record and share my knowledge. This Blog is a minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-11-26T17:33:06+08:00</updated> <author> <name>Gengxin Li</name> <uri></uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2022 Gengxin Li </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>使用 minikube 搭建 kubernetes 集群</title><link href="/posts/use-minikube-build-kubernetes/" rel="alternate" type="text/html" title="使用 minikube 搭建 kubernetes 集群" /><published>2022-11-26T00:00:00+08:00</published> <updated>2022-11-26T00:00:00+08:00</updated> <id>/posts/use-minikube-build-kubernetes/</id> <content src="/posts/use-minikube-build-kubernetes/" /> <author> <name>Gengxin Li</name> </author> <category term="Tools" /> <category term="Tutorial" /> <summary>    本文使用的系统架构为Ubuntu 20.04/22.04, CPU架构为x86-64. kubectl 版本为1.23.0, minikube版本为1.28.0 1.安装kubectl kubectl 是 kubernetes 的操作工具, 不管是 kubernetes 还是的 minikube,都用 kubectl 进行操作.阿里云上的 kubernetes 只需要给 kubectl 加上对应的配置即可操作阿里云上的 kubernetes 集群.参考通过kubectl连接Kubernetes集群 用 curl 命令下载最新发行版： curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl ... </summary> </entry> <entry><title>minikube(k8s)日志持久化方案</title><link href="/posts/minikube(k8s)-log-persistence/" rel="alternate" type="text/html" title="minikube(k8s)日志持久化方案" /><published>2022-09-30T00:00:00+08:00</published> <updated>2022-09-30T00:00:00+08:00</updated> <id>/posts/minikube(k8s)-log-persistence/</id> <content src="/posts/minikube(k8s)-log-persistence/" /> <author> <name>Gengxin Li</name> </author> <category term="Tools" /> <category term="Tutorial" /> <summary>    测试环境为了跟线上环境保持一致以及更好的配合CD以及bug定位所以k8s pods 的日志持久化就很有必要了.接下来是傻瓜式教程跟着输入命令就能实现minikube pods 的日志收集功能.    要注意的是，你的应用日志需要输出到 stdout 中.是指你需要安装到的 k8s 那个命名空间.使用默认配置的话请参考步骤1和步骤2 （推荐）.使用自定义配置的话请参考步骤1和步骤3 1.安装 Helm （Helm 是Kubernetes 的首选应用程序包管理器） curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 chmod 700 get_helm.sh ./get_helm.sh # 安装成功后提示 helm installed into... </summary> </entry> <entry><title>对于 Promise.all() 的误解</title><link href="/posts/mistake-of-promise-all/" rel="alternate" type="text/html" title="对于 Promise.all() 的误解" /><published>2022-02-26T00:00:00+08:00</published> <updated>2022-02-26T00:00:00+08:00</updated> <id>/posts/mistake-of-promise-all/</id> <content src="/posts/mistake-of-promise-all/" /> <author> <name>Gengxin Li</name> </author> <category term="Issue" /> <summary>    今天在做一个需求的时候 sequelize 抛出了这样的一个问题 Error: commit has been called on this transaction(724d4efa-4707-4931-bf7e-5172eb7e5b49), you can no longer use it. 后来分析发现自己原来一直对 Promise.all() 的使用有些误解.    简单讲下业务逻辑,就是需要实现一个 cdkey 兑换的功能,然后因为 cdkey 有不同类型,而不同类型的 cdkey 兑换逻辑有差异,但是奖励是一样的.所以单独写了一个函数 sendUnblockchainReward 用来发送奖励. 业务逻辑的执行顺序是: 路由方法调用 exchangeCommon 函数,然后调用 sendUnblockchainReward 函数.附上有问题的代码(省略了无关的代码)... </summary> </entry> <entry><title>重新理解 Node.js 事件循环</title><link href="/posts/node.js-event-loop/" rel="alternate" type="text/html" title="重新理解 Node.js 事件循环" /><published>2022-01-13T00:00:00+08:00</published> <updated>2022-01-13T00:00:00+08:00</updated> <id>/posts/node.js-event-loop/</id> <content src="/posts/node.js-event-loop/" /> <author> <name>Gengxin Li</name> </author> <category term="Learning" /> <summary>    以前我对于 Node.js 的事件循环只有一个模糊概念, 就是 Node.js 执行完毕同步任务后(我理解的同步任务是指,在当前调用栈中执行的代码,而异步任务是指在在当前调用栈中被放置在回调函数里面的代码), 如果同步任务有回调, 那么就丢到事件循环队列中去.同步任务执行完毕后再去执行队列中的回调. 但是最近总是在想一个问题, Node.js 的事件循环有一个问题, 既然是队列,那肯定是遵循先进先出的原则. 那么下面这段代码的输出就应该是 1, 2, 3. 可是最终的输出结果是 2, 3, 1. 今天摸鱼的时候突然想知道为什么,最终我在阮一峰老师的文章下对 Node.js 事件循环有了新的理解. main = () =&amp;gt; { setTimeout(() =&amp;gt; { console.log(1); }, 5 * 1000); setTimeout... </summary> </entry> <entry><title>我的2021年终总结</title><link href="/posts/my-2021-summary/" rel="alternate" type="text/html" title="我的2021年终总结" /><published>2022-01-01T00:00:00+08:00</published> <updated>2022-01-01T00:00:00+08:00</updated> <id>/posts/my-2021-summary/</id> <content src="/posts/my-2021-summary/" /> <author> <name>Gengxin Li</name> </author> <category term="Summary" /> <summary> 1.前言   首先回顾下2020年终总结中的新年展望的完成情况 补充下 Linux 相关知识 (已经掌握常用的 Linux 命令, 现在开发环境已经完全是在 ubuntu 上了) 学会 CI 自动化的一些东西 (熟练使用 Github Action 的 CI/CD) 学会使用Docker (熟悉了常用的 Docker 命令, 并且能使用 Docker 来搭建开发环境) 学习后端知识 (熟悉了 SQL, Node.js, TypeScript. 掌握了 Express, MongoDB, Redis 的使用)   总的来说,我对自己在 2020 新年期望的完成状况打个 80 分的. 没有满分的原因是因为对于后端的数据库, 微服务以及分布式系统相关的知识,我还没有深入的研究. 这其中有一些客观原因和主观原因. 因为我并不知道需要做些什么东西能让我去实践这些东... </summary> </entry> </feed>
