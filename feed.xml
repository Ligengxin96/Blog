<feed xmlns="http://www.w3.org/2005/Atom"> <id></id><title>Ligengxin's Blog</title><subtitle>This is Ligengxin's Blog, help myself record and share my knowledge. This Blog is a minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-08-31T16:03:32+08:00</updated> <author> <name>Gengxin Li</name> <uri></uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Gengxin Li </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>搭建属于自己的服务器</title><link href="/posts/build-own-server/" rel="alternate" type="text/html" title="搭建属于自己的服务器" /><published>2021-08-22T00:00:00+08:00</published> <updated>2021-08-22T00:00:00+08:00</updated> <id>/posts/build-own-server/</id> <content src="/posts/build-own-server/" /> <author> <name>Gengxin Li</name> </author> <category term="Tutorial" /> <summary>   最近搬家了，整理东西的时候竟然发现了一台大学时候用的笔记本，卖二手也卖不了多少钱，所以就废物利用，用来搭建一个服务器. 想想现在的云服务 16G Rom 得多少钱,而且这个不用的笔记本还有一个256G 的 SSD 和一个 1T 的机械硬盘.用来做一个数据中心是挺不错的选择. 1.准备工作 需要一个公网 IP，这样的话才能外网访问到我们的搭建起来的服务器。 如果自己家没用公网 IP 的话，那么就需要用我现在使用的 Plan B. 需要一个云服务器（这样我们就有了一个公网 IP）在云服务器上使用 frp 这个工具来代理到我们自己的主机上.在国内大的云服务商买个1核1G的就行,也不是很贵,预计不会超过￥500/年.野机场还更便宜,但是不推荐,因为容易跑路. 2.开始搭建 安装 ubuntu   我使用的是 refus 制作启... </summary> </entry> <entry><title>Docker 踩坑合集</title><link href="/posts/docker-issues/" rel="alternate" type="text/html" title="Docker 踩坑合集" /><published>2021-07-27T00:00:00+08:00</published> <updated>2021-07-27T00:00:00+08:00</updated> <id>/posts/docker-issues/</id> <content src="/posts/docker-issues/" /> <author> <name>Gengxin Li</name> </author> <category term="Tutorial" /> <summary>   今天检查服务器运行状况的 Git Action 突然报错, 连上服务器一看.容器都在正常运行啊.怎么会报错呢.看了下日志 Tue Jul 27 2021 11:09:04 GMT+0000 (Coordinated Universal Time) Connect mongoose failed with error: connect ECONNREFUSED 172.17.0.2:27017 原来是mongodb的容器的 ip 发生了变化.现在才知道 docker 容器是动态分配 ip 的,看了下现在的 ip 是 172.17.0.4. 在看看别的容器的ip 172.17.0.2 和 172.17.0.3. 所以看起来容器的 ip 是根据容器的启动顺序来的分配的.那么因为后端代码需要固定的 ip ,所以我们的 mongodb 的容器也需要固定的 ip . 1.解决过程 一开始... </summary> </entry> <entry><title>低成本备份数据库数据到云端</title><link href="/posts/low-price-to-backup-database-data-to-cloud/" rel="alternate" type="text/html" title="低成本备份数据库数据到云端" /><published>2021-07-23T00:00:00+08:00</published> <updated>2021-07-23T00:00:00+08:00</updated> <id>/posts/low-price-to-backup-database-data-to-cloud/</id> <content src="/posts/low-price-to-backup-database-data-to-cloud/" /> <author> <name>Gengxin Li</name> </author> <category term="Tutorial" /> <category term="Tools" /> <summary>   万万没想到,刚买没多久的野机场的服务器老板跑路了.服务器直接没了,数据都没来得及备份.现在换了新服务器第一件事情就是想办法备份数据库数据.一开始看了下各大云厂商的云存储,价格虽然不贵但是我这数据也不多.买了的话感觉有点杀鸡用牛刀的感觉.于是我突然看到我的oneDrive,所以我就想到可以备份到oneDrive里面去.免费的容量就5G,可以去淘宝扩容到永久15G.我只用了5块钱. 用来备份我这些玩具项目产生的数据绰绰有余,实在不行还可以再花点钱买个1年1T的套餐还附带一年的office365高级版. 1.自动备份 MongoDB 数据的脚本   这次我是备份mongodb数据,我的mongodb是跑在容器里面的,启动容器的时候(docker run -p 27017:27017 -v /mongodb:/data/db --name mongodb --restart=alway... </summary> </entry> <entry><title>从0到1构建自己具有https协议的服务器</title><link href="/posts/build-own-server-with-https/" rel="alternate" type="text/html" title="从0到1构建自己具有https协议的服务器" /><published>2021-07-11T00:00:00+08:00</published> <updated>2021-07-11T00:00:00+08:00</updated> <id>/posts/build-own-server-with-https/</id> <content src="/posts/build-own-server-with-https/" /> <author> <name>Gengxin Li</name> </author> <category term="Tutorial" /> <summary>   又是一年618活动.去年买的华为云网络是真的拉跨,所以今年换了一个野机场的VPS价格公道合理,就是买了一年的结果一周没用到机器就没了。野机场果然不靠谱，最后还是买了朋友手里一个闲置的二手搬瓦工的VPS. 1. 首先需要一个域名 我是在 https://www.namesilo.com/account_home.php 这上面买的域名,买域名没啥可讲的. 2. 获取免费证书 # 安装acme.sh curl https://get.acme.sh | sh # 再次尝试获取证书的时候需要登录了 # acme.sh is using ZeroSSL as default CA now. # Please update your account with an email address first. # acme.sh --register-account -m my@li... </summary> </entry> <entry><title>浅谈Node.js的垃圾回收机制</title><link href="/posts/nodejs-gc/" rel="alternate" type="text/html" title="浅谈Node.js的垃圾回收机制" /><published>2021-06-08T00:00:00+08:00</published> <updated>2021-06-08T00:00:00+08:00</updated> <id>/posts/nodejs-gc/</id> <content src="/posts/nodejs-gc/" /> <author> <name>Gengxin Li</name> </author> <category term="Learning" /> <summary>   总结下关于 Node 的 GC 的理解.众所周知, Node 是构建在 V8 引擎之上, Node 和 Chrome 架构如图1-1所示 (webKit: 布局引擎, libuv: 多平台兼容组件).而 V8 引擎可以说是 JS 的一个虚拟机.就像 JAVA 虚拟机一样,也是通过垃圾回收机制来进行内存管理的. 图1-1 Chrome 和 Node 的组件   在 V8 中,所有的 JavaScript 对象都是通过堆来进行存分配的,而 V8 对堆内存大小有一个限制,64位系统下最大为1.4G(新生代32M,老生代1400M),32位系统下最大为0.7G(新生代16M,老生代700M).做这个限制的原因是因为,如我们的需要进行回收的堆内存有 1.5G ,V8 做一次小的 GC 要 50ms 以上,做一次非增量的 GC 要 1s 以上,这就是意味着你的系统会卡顿 1s.让系统停... </summary> </entry> </feed>
